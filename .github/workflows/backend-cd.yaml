name: Backend Continuous Deployment

on:
  # just for testing purpose
  # pull_request:
  #   branches:
  #     - main

  #trigger on every merge on main
  push:
    branches:
      - main

  # run after frontend-cd is completed. Otherwise this workflow gets a timeout from aws when sending the image to ECR
  # workflow_run:
  #   workflows: ["frontend-cd.yaml"]
  #   types:
  #     - completed

  workflow_dispatch:

jobs:

  linting:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # use my customized action to setup python and dependencies and run command
      - name: Python setup and command execution
        uses: ./.github/actions/python-setup-and-execution
        with:
          python-version: 3.10.14
          job-command: 'lint'
      

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # use my customized action to setup python and dependencies and run command
      - name: Python setup and command execution
        uses: ./.github/actions/python-setup-and-execution
        with:
          python-version: 3.10.14
          job-command: 'test'


  # build the docker image
  build:
    needs: [linting, test]
    runs-on: ubuntu-latest
        
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # set aws configuration
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # login to aws ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # build and upload image to ECR
      - name: Build, Tag, and push docker image to aws ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/backend
          sleep 10
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  # deploy app to EKS
  deploy:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # set aws configuration
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # not needed
      # - name: Install kubectl
      #   run: |
      #     curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      #     chmod +x ./kubectl
      #     sudo mv ./kubectl /usr/local/bin/kubectl


      # update cluster with config in .kube
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name cluster --region us-east-1

      # set image
      - name: Set image in Kubernetes deployment
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/backend/k8s
          kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

      # use kustomization.yaml
      - name: Deploy to EKS using Kustomize
        run: |
          cd starter/backend/k8s
          kustomize build . | kubectl apply -f -

      - name: Check rollout status
        run: |
          cd starter/backend/k8s
          kubectl rollout status deployment/backend

      # for debugging purpose
      - name: Get Deployment Events
        if: failure() # Only run this step if the previous step failed
        run: |
          kubectl describe deployment backend

      # for debugging purpose
      - name: Get Pod Logs
        if: failure() # Only run this step if the previous step failed
        run: |
          kubectl get pods --selector=app=backend
          kubectl logs -l app=backend --all-containers=true
