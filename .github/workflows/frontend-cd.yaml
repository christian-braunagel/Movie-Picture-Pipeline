name: Frontend Continuous Deployment

on:
  # trigger on every pull request against main
  pull_request:
    branches:
      - main

  # just for testing purpose
  push:
    branches:
      - main

  # the pipeline can be run manually
  workflow_dispatch:

# do the linting
jobs:
  linting:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # use my customized action to setup node and dependencies and run command
      - name: Node.js setup
        uses: ./.github/actions/node-setup-and-execution
        with:
          node-version: lts/*
          path-to-workdir: 'starter/frontend'
          job-command: 'lint'

  # do the testing
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # use my customized action to setup node and dependencies and run command
      - name: Node.js setup
        uses: ./.github/actions/node-setup-and-execution
        with:
          node-version: lts/*
          path-to-workdir: 'starter/frontend'
          job-command: 'test'

  # setup the infrastructure on aws
  IaaS:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

      - name: Terraform Initialize
        run: |
          cd setup/terraform
          terraform init

      - name: Terraform Validate
        run: |
          cd setup/terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd setup/terraform
          terraform plan
        continue-on-error: true

      - name: Terraform Apply
        run: |
          cd setup/terraform
          terraform apply -auto-approve

      - name: Terraform Destroy
        run: |
          cd setup/terraform
          terraform plan -destroy

  # build the docker image
  build:
    needs: [linting, test, IaaS]
    runs-on: ubuntu-latest
        
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # setup docker buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # cache docker layers
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./starter/frontend
          file: ./starter/frontend/Dockerfile
          build-args: REACT_APP_MOVIE_API_URL=${{ secrets.REACT_APP_MOVIE_API_URL }}
          # Load the Docker cache
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

  terraform:
    runs-on: ubuntu-latest

    #
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      - name: Check out repo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

      - name: Terraform Initialize
        run: |
          cd setup/terraform
          terraform init

      - name: Terraform Validate
        run: |
          cd setup/terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd setup/terraform
          terraform plan
        continue-on-error: true

      - name: Terraform Apply
        run: |
          cd setup/terraform
          terraform apply -auto-approve

      - name: Terraform Destroy
        run: |
          cd setup/terraform
          terraform plan -destroy

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v2

      # - name: Build, Tag, and push docker image to Amazon ECR
      #   env:
      #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     REPOSITORY: my-ecr-repo
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     cd starter/frontend
      #     docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          
      #     docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # - name: Set up Kubeconfig
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1
      #     role-to-assume: arn:aws:iam::280529436201:role/udacity_eks
      #     role-session-name: GitHubActions
      #     role-duration-seconds: 1200
      #     mask-aws-account-id: false
      #     save-to-file: true

      # - name: Install kubectl
      #   run: |
      #     curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      #     chmod +x ./kubectl
      #     sudo mv ./kubectl /usr/local/bin/kubectl

      # - name: Set up Kubeconfig
      #   env:
      #     KUBECONFIG_CONTENTS: ${{ secrets.KUBECONFIG_CONTENTS }} # This is the kubeconfig file content as a GitHub secret
      #   run: |
      #     echo "$KUBECONFIG_CONTENTS" | base64 -d > $HOME/.kube/config
      #     kubectl version # This is just to test the configuration

      # - name: Deploy to EKS
      #   run: |
      #     cd starter/frontend/k8s
      #     kubectl apply -f deployment.yaml