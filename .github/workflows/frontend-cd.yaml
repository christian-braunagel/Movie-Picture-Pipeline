name: Frontend Continuous Deployment

on:
  # just for testing purpose
  # pull_request:
  #   branches:
  #     - main

  # trigger on every merge on main
  push:
    branches:
      - main

  # the pipeline can be run manually
  workflow_dispatch:

# do the linting
jobs:
  linting:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # use my customized action to setup node and dependencies and run command
      - name: Node.js setup
        uses: ./.github/actions/node-setup-and-execution
        with:
          node-version: lts/*
          path-to-workdir: 'starter/frontend'
          job-command: 'lint'

  # do the testing
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # use my customized action to setup node and dependencies and run command
      - name: Node.js setup
        uses: ./.github/actions/node-setup-and-execution
        with:
          node-version: lts/*
          path-to-workdir: 'starter/frontend'
          job-command: 'test'


  # build the docker image
  build:
    needs: [linting, test]
    runs-on: ubuntu-latest
        
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # setup docker buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # cache docker layers
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./starter/frontend
          file: ./starter/frontend/Dockerfile
          build-args: REACT_APP_MOVIE_API_URL=${{ secrets.REACT_APP_MOVIE_API_URL }}
          # Load the Docker cache
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

  # build the image and deploy it to ECR and EKS
  deploy:
    needs: [linting, test]
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # set aws configuration
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # login to aws ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # build and upload image to ECR
      - name: Build, Tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/frontend
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      # update cluster with config in .kube
      - name: Update kubeconfig
        run: |
          aws eks --region us-east-1 update-kubeconfig --name cluster

      # use kustomization.yaml
      - name: Deploy to EKS using Kustomize
        run: |
          cd starter/frontend/k8s
          kubectl apply -k .

      # set image
      - name: Set image in Kubernetes deployment
        run: |
          cd starter/frontend/k8s
          kubectl set image deployment/frontend frontend=${{ env.IMAGE_URI }} --record

      - name: Check rollout status
        run: |
          cd starter/frontend/k8s
          kubectl rollout status deployment/frontend

      # for debugging purpose
      - name: Get Deployment Events
        if: failure() # Only run this step if the previous step failed
        run: |
          kubectl describe deployment frontend

      # for debugging purpose
      - name: Get Pod Logs
        if: failure() # Only run this step if the previous step failed
        run: |
          kubectl get pods --selector=app=frontend
          kubectl logs -l app=frontend --all-containers=true
